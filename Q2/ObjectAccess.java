package Question2;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.ArrayList;

public class ObjectAccess {

	private Connection conn = null;;

	// Establish Database connection if not already open
	public Connection getConnection() {
		
		try {
			if(this.conn == null || this.conn.isClosed()) {
				
				try {
					
					Class.forName("com.mysql.jdbc.Driver");
					this.conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/click_therapeutics","root","");
				
				}catch(SQLException ex) {
					ex.printStackTrace();
				}catch (ClassNotFoundException e) {
					e.printStackTrace();
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return this.conn;
	}
	
	// To extract file extension from file name 
	public String fileExtension(String fileName) {
		
		String ext = "";
		if(fileName.lastIndexOf(".")!=-1 && fileName.lastIndexOf(".")!=0)
			ext = fileName.substring(fileName.lastIndexOf(".")+1);
		return ext;
	}
	
	// Method to store Object 
	// @fileObjectPath: Object physical path in the system from where it needs to be accessed to store
	// @return Id- PK for the table and Auto generated by database
	public int insertBlob(String fileObjectPath) {
		
		Connection c = this.getConnection();
		File file = new File(fileObjectPath);
		String fileName = file.getName();
		String extension = fileExtension(fileName);
		byte[] blob = new byte[(int)file.length()];
		
		int generated_id = 0;
		
		try {
			
			FileInputStream fInput = new FileInputStream(file);
			fInput.read(blob);
			
			String query = "insert into blob_object(fileName, extension, object, size) values(?,?,?,?)";
			PreparedStatement ps = c.prepareStatement(query,Statement.RETURN_GENERATED_KEYS);
			ps.setString(1, fileName);
			ps.setString(2, extension);
			ps.setBytes(3, blob);
			ps.setInt(4, (int)file.length());
			
			ps.executeUpdate();
			ResultSet rs = ps.getGeneratedKeys();
			if(rs.next()) {
				generated_id = rs.getInt(1);
			}
		
		}catch(FileNotFoundException e) {
			
			System.out.println("Input File not found - "+e.getMessage());
			e.printStackTrace();
			
		}catch(IOException e) {
			
			System.out.println("Unable to convert File to byte array - "+e.getMessage());
			e.printStackTrace();
			
		} catch (SQLException e) {
			e.printStackTrace();
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			
			try {
				c.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return generated_id;
	}
	
	// Method to delete an existing Object in database
	// @id PK to identify object to be deleted
	// @return count of number of objects deleted (1, since 1 PK belongs to 1 Object)
	public int deleteBlob(int id) {
		
		Connection c = this.getConnection();
		int count = Integer.MIN_VALUE;
		String query = "delete from blob_object where id = ?";
		try {

			PreparedStatement ps = c.prepareStatement(query);
			ps.setInt(1, id);
			
			count = ps.executeUpdate();
		}catch (SQLException e) {
			e.printStackTrace();
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			
			try {
				c.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return count;
	}
	
	// Method to read object from database
	// @id PK to access object
	// @return File object
	public File readObject(int id) {
		
		Connection c = this.getConnection();
		File outputFile = null;
		
		String query = "select * from blob_object where id = ?";
		try {

			PreparedStatement ps = c.prepareStatement(query);
			ps.setInt(1, id);
			
			ResultSet rs = ps.executeQuery();
			
			if(rs.next()) {
			
				String fileName = rs.getString(2);
				int size = rs.getInt(5);
				
				byte[] byteData = new byte[size];
				outputFile = new File(fileName);
				FileOutputStream op = new FileOutputStream(outputFile);
				
				InputStream is = rs.getBinaryStream(4);
				while(is.read(byteData)>0) {
					op.write(byteData);
				}
				is.close();
				op.close();
			}
		}catch (SQLException e) {
			e.printStackTrace();
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			
			try {
				c.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return outputFile;
	}
	
	// Method to update modified Object to database
	// @id PK of the modified object
	// @file modified object to be stored
	// @return count of number of objects deleted (1, since 1 PK belongs to 1 Object)
	public int updateObject(int id, File file) {
		
		Connection c = this.getConnection();
		int count = Integer.MIN_VALUE;
		String query = "update blob_object set filename=?, extension=?, object=?, size=? where id = ?";
		byte[] newBlob;
		try {

			String fileName = file.getName();
			String extension = fileExtension(fileName);
			newBlob = new byte[(int)file.length()];
			
			FileInputStream fInput = new FileInputStream(file);
			fInput.read(newBlob);
			
			PreparedStatement ps = c.prepareStatement(query);
			ps.setString(1, fileName);
			ps.setString(2, extension);
			ps.setBytes(3, newBlob);
			ps.setInt(4, (int)file.length());
			ps.setInt(5, id);
			
			count = ps.executeUpdate();
		}catch (SQLException e) {
			e.printStackTrace();
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			
			try {
				c.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return count;
	}
	
	public static void main(String[] args) {
		
		ObjectAccess oa = new ObjectAccess();
		String filePath = "D:\\Rahul\\click Therapeutics\\Exercise\\Solution\\Q2\\MainClass.java";		
		
		// Assuming that we already got list of 10 Object name or filepath
		// which we will be saving and later accessing using our methods from this class
		List<String> path = new ArrayList<>();
		path.add(filePath);	// .. Add 9 other objects 
		List<Integer> objectIdList = new ArrayList<>();
		for(String objectPath: path) {
			
			int objectId = oa.insertBlob(objectPath);
			if(objectId>0) 
				objectIdList.add(objectId);	
			else
				System.out.println("Unable to add Object: "+objectPath);
		}
		
		// The id of the objects saved is stored in list called objectIdList
		List<File> object = new ArrayList<File>();
		for(Integer id: objectIdList) {
			
			File f = oa.readObject(id);
			if(f!=null) 
				object.add(f);
			else
				System.out.println("Unable to fetch Object at Id: "+id);
		}
	}
}
